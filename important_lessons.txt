- Objects & Arrays are passed by reference in Javascript!
- The state should not be mutaded directly as that can lead to a lot of problems unexpected problems.
- Hence, treat the state as if it were immutable.
- Create copies e.g. with the spread operator of an object or array inside the state when you want to update the state and use ergo that copy to update the state.
- And remember to ALWAYS use the setState.

- CSS Modules is possible to use to scope css files to not be global; But instead local to your files. Which can be handy.

- Chrome Developer tool (Or using the Visual Studio Code Chrome debug extension) is a great way to debug logical errors by setting break points on lines.
- ErrorBoundary is a good way to keep uncertain components that might fail on live (such as using third party APIs) safe from breaking the whole application and instead display an error message to the user, and log issues for you. 

- Use stateless components (function components) as much as possible. 
- Try to narrow it down so only the central top component of each feature is a stateful component (class components) and then it trickles down to smaller stateless ones.
- This is to ensure that the flow is easy to read when it comes to states. Having a lot of states created and passed around will quickly become unmanagable.
- By instead passing down ergo all states that regard the authentication feature from one bigger central component it will be much more managable to expand and work with.


Component Lifecycle - Creation Flow: 
https://puu.sh/C7Y0E/38436c2d41.png

Component Lifecycle - Update Flow: 
https://puu.sh/C80Ex/a37d3abd3d.png


- A fragment, which is used by having empty JSX tag. Which is a  way (in React 16.2+) to return JSX in our render function, without having to wrap the content in e.g. a div.
Similiar to the Aux Component in this project.
<>
    <h1>First Element</h1>
    <h1>Second Element</h1>
</>


PropTypes library. Can be used in certain cases, such as working in teams, to define what type of data is expected from a prop, e.g. a number / function / string etc.


- Context API provides a way to pass data through the component tree without having to pass props down manually at every level.
Can be a good way to share certain props that are global, like authentication login state, theme, locale preference)

- ComponentWillMount, componentWillUpdate, compnentWillReceiveProps - Discouraged from now on.
Easily to do bad things and usually not that useful.
Offers two new Lifecycle Hooks.
getDerivedStateFromProps & getSnapshotBeforeUpdate


Planning a React App
1. Plan Component Tree / Component Structure
2. Application State (Data)
3. Components vs Containers


_____

Improve Performance and Application: 
- Prop Type Validation. A bit more useful when working on a team.
- Pure Components & ShouldComponentUpdate

__

Good Thirdparty Packages:
- Axios - Make http / Ajax requests easier.
- PropTypes - To validate prop variable types. Good for bigger projects with several teammembers.
- react-router-dom (& react-router used as a dependency) - More or less the de facto packages for handling routing in React. 

Other Good Resoures:
https://jsonplaceholder.typicode.com/ - Used for dummy JSON http requests.
